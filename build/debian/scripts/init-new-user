#! /bin/bash

# New User Initialization
# =======================

err_exit() {
	echo "# !Error: $*"
	exit 1
}

_OUTPUT_FILE=/tmp/init-new-user.lastlog
rm -f $_OUTPUT_FILE
install -m 640 /dev/null $_OUTPUT_FILE

set +e

ARG_NAME="${1:-${NEW_USER_NAME}}"
ARG_GROUP="${2:-${NEW_USER_GROUP}}"
ARG_UID=${3:-${NEW_USER_UID}}
ARG_GID=${4:-${NEW_USER_GID}}
ARG_SUDO="${5:-${NEW_USER_SUDO:-false}}"

print_id() {
	# uid username gid groupname
	echo "uid=${1}(${2}) gid=${3}(${4})"
}

DEFAULT_NAME=${IMAGE_DEFAULT_USER_NAME:-$(id -un)}
DEFAULT_UID=$(id -u "${DEFAULT_NAME}" 2>/dev/null)
[[ -z "${DEFAULT_UID}" ]] && DEFAULT_UID=$(id -u)

DEFAULT_GROUP=${IMAGE_DEFAULT_USER_GROUP:-$(id -gn)}
DEFAULT_GID=$(id -g "${DEFAULT_NAME}" 2>/dev/null)
[[ -z "${DEFAULT_GID}" ]] && DEFAULT_GID=$(id -g)

echo "default user info ->" \
	"$(print_id "${DEFAULT_UID}" "${DEFAULT_NAME}" "${DEFAULT_GID}" "${DEFAULT_GROUP}")"

# empty user name uses image default
[[ -z "${ARG_NAME}" ]] && ARG_NAME=${DEFAULT_NAME}

# empty user group name uses default group name
[[ -z "${ARG_GROUP}" ]] && ARG_GROUP=${DEFAULT_GROUP}

# empty user id uses one above default
[[ -z "${ARG_UID}" ]] && ARG_UID=$((DEFAULT_UID + 1))

# new gid not specified, check if using default gid or create a new gid
if [[ -z "${ARG_GID}" ]]; then
	[[ "${ARG_GROUP}" = "${DEFAULT_GROUP}" ]] &&
		ARG_GID=${DEFAULT_GID} ||
		ARG_GID=$((DEFAULT_GID + 1))
fi

# workaround for 32-bit uid/gids for useradd, groupadd, usermod
rm /var/log/lastlog /var/log/faillog
ln -s /dev/null /var/log/lastlog
ln -s /dev/null /var/log/faillog

# add new group if new id specified
if [[ ! ${ARG_GID} -eq ${DEFAULT_GID} ]]; then
	[[ "${ARG_GROUP}" = "${DEFAULT_GROUP}" ]] &&
		err_exit "group name '$ARG_GROUP' with gid '$ARG_GID' can't be the same" \
			"as existing group: gid=${DEFAULT_GID}(${DEFAULT_GROUP})."
	groupadd --gid ${ARG_GID} --force "${ARG_GROUP}"
fi

# add new user if not found
if [[ ! $(id -u "${ARG_NAME}" 2>/dev/null) ]]; then
	echo "adding new user ->" \
		"$(print_id ${ARG_UID} "${ARG_NAME}" ${ARG_GID} "${ARG_GROUP}")," \
		"current user is $(id)"
	useradd -u ${ARG_UID} -g ${ARG_GID} --no-log-init -ms /bin/bash "${ARG_NAME}"
fi

# actual group name and number assigned to new user
ARG_GID=$(id -g "${ARG_NAME}")
EST_NEW_GROUP_NAME=$(getent group "${ARG_GID}" | cut -d: -f1)

# overwrite groupname if different from specified
if [[ ! "${EST_NEW_GROUP_NAME}" = "${ARG_GROUP}" ]]; then
	ARG_GROUP=${EST_NEW_GROUP_NAME}
fi
EST_NEW_GROUP_GID=$(getent group "${ARG_GROUP}" | cut -d: -f3)

# add user to all other groups
usermod -a -G users,"${DEFAULT_GROUP}","${ARG_GROUP}" "${ARG_NAME}" 2>/dev/null

# add sudo user
if [[ ${ARG_SUDO} = true ]]; then
	usermod -a -G sudo "${ARG_NAME}" 2>/dev/null
	passwd -qd "${ARG_NAME}" 2>/dev/null
	echo "${ARG_NAME} ALL=(ALL) NOPASSWD:ALL" >>/etc/sudoers
fi

# workaround for 32-bit uid/gids for useradd, groupadd, usermod
rm /var/log/lastlog /var/log/faillog
touch /var/log/lastlog
touch /var/log/faillog

# username:uid:groupname:gid
cat <<EOF >>$_OUTPUT_FILE
${ARG_NAME}:${ARG_UID}:${ARG_GROUP}:${ARG_GID}
EOF

echo "new user added -> $(print_id ${ARG_UID} "${ARG_NAME}" "${ARG_GID}" "${ARG_GROUP}")"
